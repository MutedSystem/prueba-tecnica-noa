import Head from 'next/head'
import { NextPage } from 'next';
import { GetStaticProps } from 'next'
import { pokemonAPI } from '@/api';
import { PokemonsResponse, TypesResponse } from '@/interfaces';
import dynamic from 'next/dynamic';
import { useState } from 'react';
import PokemonDetails from '@/components/PokemonDetails';
import Image from 'next/image';

// Se carga de forma dinamica el componente de renderizado del grafo
// para evitar problemas con la deteccion del componente window
// que sirve para dibujar el grafo
const Graph = dynamic(() => import('./../components/GraphRenderer'), {
  ssr: false
})

const Home: NextPage = (props) => {

  // obtención de tipos y pokemones a partir de los props de la pagina

  const { types, pokemons } = props;

  const [showTypesInfo, setShowPokemonInfo] = useState(false)
  const [currentPokemon, setCurrentPokemon] = useState(pokemons[0])

  const myData = {
    nodes: [],
    links: []
  }

  // Creación de los nodos del grafo a partir de los datos de los tipos de pokemon
  types.forEach(type => {
    myData.nodes.push({
      "id": "type" + type.id,
      "name": type.name,
      "val": 1
    })
  });

  // Creación de los nodos del grafo a partir de los datos los de pokemon
  pokemons.forEach(pokemon => {
    myData.nodes.push({
      "id": "pokemon" + pokemon.id,
      "name": pokemon.name,
      "val": 1
    })
  });

  // Creación de las relaciones entre los nodos de pokemon y tipos de pokemon
  pokemons.forEach(pokemon => {
    pokemon.pokemon_v2_pokemontypes.forEach(pokemonTypes => {
      myData.links.push({
        source: "pokemon" + pokemon.id,
        target: "type" + pokemonTypes.pokemon_v2_type.id,
        width: 1,
        color: "rgba(255,255,255,1)"
      })
    });
  });

  /// Función que muestra el peso, la altura, los ataques, etc.
  const handleNodeClick = (node, evt) => {
    if (node.id?.toString().replaceAll("pokemon", "").length != node.id?.toString().length) {
      const pokemonId = node.id?.toString().replaceAll("pokemon", "")
      setCurrentPokemon(pokemons.find((pokemon) => {
        return pokemon.id == pokemonId
      }))
      setShowPokemonInfo(true)
    }
  }

  /// Esconder los detalles de los pokemon
  const hidePokemon = () => {
    setShowPokemonInfo(false)
  }

  return (
    <>
      <Head>
        <title>Pokemon API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='flex flex-col content-center'>
        <h1 className='text-3xl font-bold underline text-center py-5'>Pokemons</h1>
        <div className='-mt-[8vh]'>
          <Graph
            graphData={myData}
            onNodeClick={(node, evt) => { handleNodeClick(node, evt) }}
            nodeCanvasObject={(node, ctx, globalScale) => {
              /// si el nodo representa a un pokemon dibujar el texto
              if (node.id?.toString().replaceAll("pokemon", "").length != node.id?.toString().length) {
                const label = node.name;
                const fontSize = 16 / globalScale;
                ctx.font = `${fontSize}px Sans-Serif`;
                const textWidth = ctx.measureText(label).width;
                const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 1); // some padding

                ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
                ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);

                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
                ctx.fillText(label, node.x, node.y);

                node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
              }

              // Si el nodo representa un tipo de pokemon dibujar su icono
              if (node.id?.toString().replaceAll("type", "").length != node.id?.toString().length) {
                const img = document.getElementById(`base-image-${node.name}`);

                ctx.drawImage(img, node.x - 10, node.y - 10, 20, 20);
              }

            }}
          />
        </div>
        <PokemonDetails
          showPokemonsInfo={showTypesInfo ? "" : "hidden"}
          pokemonDetails={currentPokemon}
        >
          <button
            className="bg-rose-400 hover:bg-rose-200 text-white font-bold w-[30px] h-[30px] m-0 p-0 text-center rounded-[20px] justify-self-end flex  items-center justify-center"
            onClick={hidePokemon}
          >
            <Image
              src={'/close.svg'}
              alt="close icon"
              width={10}
              height={10}
            />
          </button>
        </PokemonDetails>
        {
          types.map((type, index) => {
            return (
              <img src={`/types/${type.name}.svg`} alt={type.name} id={`base-image-${type.name}`} className='hidden' key={"type-image-" + type.id} />
            )
          })
        }
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps = async (context) => {

  // obteniendo los tipos de pokemon usando la versión beta de GraphQL 
  // que tiene la Pokemon API

  const typesResponse = await pokemonAPI.post<TypesResponse>("", {
    query: `
    query getTypesQuery {
      pokemon_v2_type {
        id
        name
      }
    }
    
    `
  })

  const pokemonsResponse = await pokemonAPI.post<PokemonsResponse>("", {
    query: `
    query getPokemonsquery {
      pokemon_v2_pokemon(limit: 151) {
        id
        height
        name
        pokemon_v2_pokemontypes {
          pokemon_v2_type {
            name
            id
          }
        }
        weight
      }
    }
    
    
    `
  })
  
  const types = typesResponse.data.data.pokemon_v2_type.slice(0, typesResponse.data.data.pokemon_v2_type.length - 2)

  return {
    props: {
      types,//singleTypeResponse,
      pokemons: pokemonsResponse.data.data.pokemon_v2_pokemon ///singlePokemonResponse
    },
  }
}

export default Home;
